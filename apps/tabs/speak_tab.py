"""Speak tab for Thai text-to-speech."""

import streamlit as st


def render_speak_tab(tts_engine):
    """Render the speak tab with TTS functionality."""
    st.header("üîä Text-to-Speech")
    st.markdown("Convert Thai text to speech with high-quality neural voices")

    # Input section for TTS
    col1, col2 = st.columns([2, 1])

    with col1:
        tts_text = st.text_area(
            "Enter Thai text to speak:",
            value="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å",
            height=100,
            help="Enter Thai text to convert to speech"
        )

    with col2:
        st.markdown("### Voice Options")

        # Get available voices
        available_voices = tts_engine.get_available_voices()
        voice_options = {}
        for voice_id, details in available_voices.items():
            voice_options[f"{details['name']} ({details['gender']})"] = voice_id

        selected_voice_name = st.selectbox(
            "Choose voice:",
            list(voice_options.keys()),
            help="Select Thai voice for speech synthesis"
        )
        selected_voice = voice_options[selected_voice_name]

        # Speech speed (placeholder for future)
        st.markdown("### Settings")
        st.info("üîß Speech rate and pitch controls coming soon!")

    # Generate speech
    if st.button("üîä Generate Speech", type="primary"):
        if tts_text.strip():
            with st.spinner("Generating speech..."):
                audio_bytes = tts_engine.speak_text(tts_text, selected_voice)

                if audio_bytes:
                    st.success("‚úÖ Speech generated successfully!")

                    # Play audio
                    st.audio(audio_bytes, format="audio/mp3", start_time=0)

                    # Show text being spoken
                    st.markdown("**Speaking:**")
                    st.markdown(f"*{tts_text}*")

                    # Download option
                    st.download_button(
                        label="üì• Download Audio",
                        data=audio_bytes,
                        file_name=f"thai_speech_{hash(tts_text) % 10000}.mp3",
                        mime="audio/mpeg"
                    )
                else:
                    st.error("‚ùå Failed to generate speech. Please check your internet connection.")
        else:
            st.warning("Please enter some Thai text to convert to speech.")

    # Example phrases
    st.markdown("---")
    st.markdown("### üéØ Example Phrases")

    # Gender-neutral examples (shown for all voices)
    neutral_examples = [
        ("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å", "Nice to meet you"),
        ("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á", "How are you?"),
        ("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å", "The weather is very nice today"),
        ("‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å", "The food is very delicious"),
        ("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©", "Excuse me / Sorry"),
        ("‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£", "No problem / It's okay")
    ]

    # Gender-specific examples
    male_examples = [
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "Hello (male speaker)"),
        ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö", "Thank you very much (male)"),
        ("‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏´‡πå‡∏ô", "My name is John (male)"),
        ("‡∏ú‡∏°‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö", "I'm from America (male)"),
        ("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", "Please help me (male)")
    ]

    female_examples = [
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞", "Hello (female speaker)"),
        ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞", "Thank you very much (female)"),
        ("‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏£‡∏µ‡πà", "My name is Mary (female)"),
        ("‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡∏Ñ‡πà‡∏∞", "I'm from America (female)"),
        ("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞", "Please help me (female)")
    ]

    # Determine which examples to show based on selected voice
    selected_voice_info = available_voices[selected_voice]
    is_male_voice = selected_voice_info["gender"] == "Male"

    if is_male_voice:
        examples = neutral_examples + male_examples
    else:
        examples = neutral_examples + female_examples

    cols = st.columns(2)
    for i, (thai, english) in enumerate(examples):
        with cols[i % 2]:
            if st.button(f"üîä {thai}", key=f"example_{i}_{selected_voice}"):
                with st.spinner("Generating speech..."):
                    audio_bytes = tts_engine.speak_text(thai, selected_voice)
                    if audio_bytes:
                        st.audio(audio_bytes, format="audio/mp3")
                        st.caption(f"*{english}*")
